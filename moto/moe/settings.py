# encoding: utf-8
"""
Django settings for moe project.

Generated by 'django-admin startproject' using Django 1.8.

For more information on this file, see
https://docs.djangoproject.com/en/1.8/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.8/ref/settings/
"""

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
import os
from six.moves import UserDict
from django.utils.translation import ugettext_lazy as _
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.8/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'co&da5*8&emy)9lrl7-!8@y$@r0=ll!$8^(%t1^a-)lr2eu@hn'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []
INTERNAL_IPS = ['127.0.0.1']

#django-redis-sessions
SESSION_ENGINE = 'redis_sessions.session'
SESSION_REDIS_HOST = 'localhost'
SESSION_REDIS_PORT = 6379
SESSION_REDIS_DB = 0
# SESSION_REDIS_UNIX_DOMAIN_SOCKET_PATH = '/var/run/redis/redis.sock'
# SESSION_REDIS_PASSWORD = 'password'
# SESSION_REDIS_PREFIX = 'session'

SITE_ID=1
# Application definition

INSTALLED_APPS = (
    'django.contrib.sites',
     'material',
        # 'material.frontend',
    'material.admin',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'rest_framework.authtoken',
    'django_js_reverse',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'rest_auth',
    'rest_auth.registration',
    'taggit',
    'haystack',
    'django_rq',
    'moto.moe',
    'moto',
    'django_mobile'
    # 'django.contrib.humanize'
    # 'rest_framework_mongoengine'
)

INSTALLED_APPS += (
    'mptt',
    'django_comments_threaded',
)

# JS_REVERSE_FILTERS=[]
JS_REVERSE_EXCLUDE_NAMESPACES = ['admin']
JS_REVERSE_USE_BACKBONE =True

MIDDLEWARE_CLASSES = (
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django_mobile.middleware.MobileDetectionMiddleware',
    'django_mobile.middleware.SetFlavourMiddleware',
    'django_mobile.cache.middleware.CacheFlavourMiddleware',
    'moto.moe.middleware.TimezoneMiddleware'
)
FLAVOURS_STORAGE_BACKEND='cookie'
LANGUAGE_COOKIE_NAME = 'lang'

AUTHENTICATION_BACKENDS = (

    # Needed to login by username in Django admin, regardless of `allauth`
    'django.contrib.auth.backends.ModelBackend',

    # `allauth` specific authentication methods, such as login by e-mail
    'allauth.account.auth_backends.AuthenticationBackend',
)
# REST_FRAMEWORK = {
#     # Use Django's standard `django.contrib.auth` permissions,
#     # or allow read-only access for unauthenticated users.
#     'DEFAULT_PERMISSION_CLASSES': [
#         'rest_framework.permissions.DjangoModelPermissionsOrAnonReadOnly'
#     ]
# }
# LOGIN_URL
# LOGIN_REDIRECT_URL
#all auth
ACCOUNT_EMAIL_REQUIRED=True
ACCOUNT_AUTHENTICATION_METHOD= "username_email"
ACCOUNT_USERNAME_BLACKLIST=['url', 'about', 'account', 'add', 'admin', 'api', 'app', 'apps', 'archive', 'archives', 'auth', 'blog', 'config', 'connect', 'contact', 'create', 'delete', 'direct_messages', 'downloads', 'edit', 'email', 'faq', 'favorites', 'feed', 'feeds', 'follow', 'followers', 'following', 'help', 'home', 'invitations', 'invite', 'jobs', 'login', 'logout', 'logs', 'map', 'maps', 'oauth', 'oauth_clients', 'openid', 'privacy', 'register', 'remove', 'replies', 'rss', 'save', 'search', 'sessions', 'settings', 'signup', 'sitemap', 'ssl', 'subscribe', 'terms', 'trends', 'unfollow', 'unsubscribe', 'url', 'user', 'widget', 'widgets', 'xfn', 'xmpp']
#rest auth

REST_AUTH_SERIALIZERS={
  'TOKEN_SERIALIZER':'moto.moe.api.serializers.TokenSerializer'

}
EMAIL_HOST='smtp.exmail.qq.com'
DEFAULT_FROM_EMAIL = '元萌 <no-reply@moto.moe>'
# EMAIL_PORT=
EMAIL_HOST_USER='no-reply@moto.moe'
EMAIL_HOST_PASSWORD=''
# EMAIL_USE_TLS=
# DEFAULT_CHARSET=

IMAGE_SIZE = UserDict({

    'size':{
        'force':False,
        'width':2048,
        'height':1080
    },
    'thumbnail':{
      'force':False,
      'width':189,
      'height':335
    }
})
setattr(IMAGE_SIZE, 'size', IMAGE_SIZE['size'])
setattr(IMAGE_SIZE, 'thumbnail', IMAGE_SIZE['thumbnail'])
REST_FRAMEWORK = {
    # 'DEFAULT_AUTHENTICATION_CLASSES': (
    #     'rest_framework.authentication.BasicAuthentication',
    #     'rest_framework.authentication.SessionAuthentication',
    # ),
    'PAGINATE_BY': 12,                 # Default to 10
    'PAGINATE_BY_PARAM': 'page_size',  # Allow client to override, using `?page_size=xxx`.
    'MAX_PAGINATE_BY': 100             # Maximum limit allowed when using `?page_size=xxx`.
}
#for rest_auth
# ACCOUNT_ADAPTER = 'moe_auth.auth.adapters.DefaultAccountAdapter'

# for allauth allauth/account/forms.py :255 clean_email
ACCOUNT_UNIQUE_EMAIL = True
# ACCOUNT_SIGNUP_FORM_CLASS ='moe.api.auth.forms.SignupForm'
# ACCOUNT_FORMS = {
#     'signup':'moe_auth.auth.forms.SignupForm'
# }
REST_SESSION_LOGIN = True
AUTH_USER_MODEL = 'moe.User'
ROOT_URLCONF = 'moto.moe.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR,os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.template.context_processors.static',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                 # `allauth` specific context processors
                # 'allauth.account.context_processors.account',

                # 'allauth.socialaccount.context_processors.socialaccount',
            ],
        },
    },
]

WSGI_APPLICATION = 'moto.moe.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.8/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'moto',
        'USER': 'root',
        'PASSWORD':'',
        'HOST': '127.0.0.1',
        "connect_timeout": 20
    }
}


HAYSTACK_CONNECTIONS = {
    'default': {
        'ENGINE': 'haystack.backends.whoosh_backend.WhooshEngine',
        'PATH': os.path.join(os.path.dirname(__file__), 'whoosh_index'),
    },
}
# HAYSTACK_CONNECTIONS = {
#     'default': {
#         'ENGINE': 'haystack.backends.simple_backend.SimpleEngine',
#     },
# }
# HAYSTACK_SIGNAL_PROCESSOR = 'haystack.signals.RealtimeSignalProcessor'
# HAYSTACK_SIGNAL_PROCESSOR = 'celery_haystack.signals.CelerySignalProcessor'
HAYSTACK_SIGNAL_PROCESSOR = 'haystack_rqueue.signals.RQueueSignalProcessor'
RQ_QUEUES = {
    'default': {
        'HOST': 'localhost',
        'PORT': 6379,
        'DB': 0,
        # 'PASSWORD': 'some-password',
        'DEFAULT_TIMEOUT': 360,
    }
    # ,
    # 'high': {
    #     'URL': os.getenv('REDISTOGO_URL', 'redis://localhost:6379'), # If you're on Heroku
    #     'DB': 0,
    #     'DEFAULT_TIMEOUT': 500,
    # },
    # 'low': {
    #     'HOST': 'localhost',
    #     'PORT': 6379,
    #     'DB': 0,
    # }
}
# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.dummy'
#     }
# }

# Internationalization
# https://docs.djangoproject.com/en/1.8/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True
LOCALE_PATHS = (
     os.path.join(BASE_DIR, "locale"),
)
LANGUAGES = (
  ('zh-cn', _('Chinese')),
  ('en', _('English')),
  ('ja', _('Japanese')),
)
# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.8/howto/static-files/

STATIC_URL = '/static/'

STATICFILES_DIRS = (
    os.path.join(BASE_DIR, "static"),
)

STATIC_ROOT = os.path.join(BASE_DIR, "assets")

MEDIA_URL = '/media/'
FILE_UPLOAD_TEMP_DIR=os.path.join(BASE_DIR, "media_temp")
MEDIA_ROOT = os.path.join(BASE_DIR, "media")

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format':
    '%(levelname)s %(asctime)s %(module)s %(process)d %(thread)d %(message)s'
        },
        'simple': {
            'format': '%(levelname)s %(message)s'
        },
        "rq_console": {
            "format": "%(asctime)s %(message)s",
            "datefmt": "%H:%M:%S",
        },
    },
    'handlers': {
        'mail_admins': {
            'level': 'ERROR',
            'class': 'django.utils.log.AdminEmailHandler'
        },
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'simple'
        },
        "rq_console": {
            "level": "DEBUG",
            "class": "rq.utils.ColorizingStreamHandler",
            "formatter": "rq_console",
            "exclude": ["%(asctime)s"],
        }
    },
    'loggers': {
        'django.request': {
            'handlers': ['mail_admins'],
            'level': 'ERROR',
            'propagate': True,
        },
        'django.db.backends': {
            'handlers': ['console'],
            'level': 'DEBUG',
            'propagate': True,
        },
        "rq.worker": {
            "handlers": ["rq_console"],
            "level": "DEBUG"
        },

    }
}

CRAWLER_SETTINGS = {
    "seiga":{
        "uid":"",
        "password":""
    },
    "pixiv":{
        "uid":"",
        "password":""
    }
}
